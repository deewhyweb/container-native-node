apiVersion: v1
kind: Service
metadata:
  labels:
    app: nodeservice
  name: nodeservice
spec:
  externalTrafficPolicy: Cluster
  ports:
    - name: http
      port: 8080
      protocol: TCP
      targetPort: 8080
  selector:
    deploymentconfig: nodeservice
  sessionAffinity: None
  type: NodePort
status:
  loadBalancer: {}
---
kind: DeploymentConfig
apiVersion: v1
metadata:
  name: nodeservice
spec:
  template: 
    metadata:
      labels:
        name: nodeservice
    spec:
      containers:
        - name: nodeservice
          env:
            - name: MONGO_CONNECTION_STRING
              value: 'mongodb://admin:admin_pass@mongodb'
            - name: MONGO_DBNAME
              value: test
          image: docker.io/deewhyweb/node-service:latest
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /ready
              port: 3000
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /health
              port: 3000
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          ports:
            - containerPort: 8080
              protocol: "TCP"
  replicas: 1 
  selector:
    name: "nodeservice"
  triggers:
    - type: "ConfigChange" 
    - type: "ImageChange" 
      imageChangeParams:
        automatic: true
        containerNames:
          - "nodeservice"
        from:
          kind: "ImageStreamTag"
          name: "node-service:latest"
  strategy: 
    type: "Rolling"
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: nodeservice
  annotations:
    kubernetes.io/ingress.class: "istio"
spec:
  rules:
  - http:
      paths:
      - path: /
        backend:
          serviceName: nodeservice
          servicePort: 8080
---
apiVersion: v1
kind: Route
metadata:
  labels:
    app: nodeservice
  name: nodeservice
spec:
  port:
    targetPort: http
  to:
    kind: Service
    name: nodeservice
    weight: 100
  wildcardPolicy: None
status:
  ingress:
    - conditions:
      routerName: router
      wildcardPolicy: None

      